package ds.queue;

public class Queue {
	private int maxSize; //initialized the set of slots
	private long[] queArray; //slots to maintain data
	private int front;
	private int rear;
	private int nItems;
	
	public Queue(int size) {
		this.maxSize = size;
		this.queArray = new long[size];
		front = 0; //index posiion of the first slot of the array;
		rear=-1; 
		nItems=0;
	}
	public void insert(long j) {
		
		if(rear == maxSize -1 ) {
			rear = -1;
		}
		rear++;
		queArray[rear] = j;
		nItems ++;
	}
	public long remove() {//remove items from the front of the queue
		long temp = queArray[front];
		front ++;
		nItems --;
		if(front == maxSize) {
			front = 0; // we set the front to 0 index so we can use the entire method again
		}
		return temp;
	}
	public long peakFront() {
		return queArray[front];
	}
	public boolean isEmpty() {
		return nItems == 0;
	}
	public boolean isFull() {
		return nItems == maxSize;
	}
	public void view() {
		System.out.print("[ ");
		for(int i=0;i<queArray.length;i++) {
			System.out.print(queArray[i] + " ");
		}
		System.out.println("]");
	}
}
